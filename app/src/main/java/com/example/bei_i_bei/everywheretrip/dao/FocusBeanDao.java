package com.example.bei_i_bei.everywheretrip.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.bei_i_bei.everywheretrip.bean.FocusBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FOCUS_BEAN".
*/
public class FocusBeanDao extends AbstractDao<FocusBean, Long> {

    public static final String TABLENAME = "FOCUS_BEAN";

    /**
     * Properties of entity FocusBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property Photo = new Property(3, String.class, "photo", false, "PHOTO");
        public final static Property Following = new Property(4, int.class, "following", false, "FOLLOWING");
        public final static Property Occupation = new Property(5, String.class, "occupation", false, "OCCUPATION");
    }


    public FocusBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FocusBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FOCUS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"LOCATION\" TEXT," + // 2: location
                "\"PHOTO\" TEXT," + // 3: photo
                "\"FOLLOWING\" INTEGER NOT NULL ," + // 4: following
                "\"OCCUPATION\" TEXT);"); // 5: occupation
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FOCUS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FocusBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
        stmt.bindLong(5, entity.getFollowing());
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(6, occupation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FocusBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(3, location);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(4, photo);
        }
        stmt.bindLong(5, entity.getFollowing());
 
        String occupation = entity.getOccupation();
        if (occupation != null) {
            stmt.bindString(6, occupation);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public FocusBean readEntity(Cursor cursor, int offset) {
        FocusBean entity = new FocusBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // location
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photo
            cursor.getInt(offset + 4), // following
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // occupation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FocusBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLocation(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPhoto(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFollowing(cursor.getInt(offset + 4));
        entity.setOccupation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FocusBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FocusBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FocusBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
